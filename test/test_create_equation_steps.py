import pytest
from app.scripts.create_equation_steps import equation_steps

#Defining parameters of the test
@pytest.mark.parametrize("test_mock_expression,expected",
    [
        #First degree expression 
        ("- 2 * x + 3", 
        [
        "f(x) = - 2 * x + 3 = - 2 * (-3) + 3 = 9",
        "f(x) = - 2 * x + 3 = - 2 * (-2) + 3 = 7",
        "f(x) = - 2 * x + 3 = - 2 * (-1) + 3 = 5",
        "f(x) = - 2 * x + 3 = - 2 * (0) + 3 = 3",
        "f(x) = - 2 * x + 3 = - 2 * (1) + 3 = 1",
        "f(x) = - 2 * x + 3 = - 2 * (2) + 3 = -1",
        "f(x) = - 2 * x + 3 = - 2 * (3) + 3 = -3"
        ]),
        ("2 * x - 1", 
        [
        "f(x) = 2 * x - 1 = 2 * (-3) - 1 = -7",
        "f(x) = 2 * x - 1 = 2 * (-2) - 1 = -5",
        "f(x) = 2 * x - 1 = 2 * (-1) - 1 = -3",
        "f(x) = 2 * x - 1 = 2 * (0) - 1 = -1",
        "f(x) = 2 * x - 1 = 2 * (1) - 1 = 1",
        "f(x) = 2 * x - 1 = 2 * (2) - 1 = 3",
        "f(x) = 2 * x - 1 = 2 * (3) - 1 = 5"
        ]),
        ("- x + 1", 
        [
        "f(x) = - x + 1 = - (-3) + 1 = 4",
        "f(x) = - x + 1 = - (-2) + 1 = 3",
        "f(x) = - x + 1 = - (-1) + 1 = 2",
        "f(x) = - x + 1 = - (0) + 1 = 1",
        "f(x) = - x + 1 = - (1) + 1 = 0",
        "f(x) = - x + 1 = - (2) + 1 = -1",
        "f(x) = - x + 1 = - (3) + 1 = -2"
        ]),
        ("3 * x + 5", 
        [
        "f(x) = 3 * x + 5 = 3 * (-3) + 5 = -4",
        "f(x) = 3 * x + 5 = 3 * (-2) + 5 = -1",
        "f(x) = 3 * x + 5 = 3 * (-1) + 5 = 2",
        "f(x) = 3 * x + 5 = 3 * (0) + 5 = 5",
        "f(x) = 3 * x + 5 = 3 * (1) + 5 = 8",
        "f(x) = 3 * x + 5 = 3 * (2) + 5 = 11",
        "f(x) = 3 * x + 5 = 3 * (3) + 5 = 14"
        ]),
        ("2 * x + 5", 
        [
        "f(x) = 2 * x + 5 = 2 * (-3) + 5 = -1",
        "f(x) = 2 * x + 5 = 2 * (-2) + 5 = 1",
        "f(x) = 2 * x + 5 = 2 * (-1) + 5 = 3",
        "f(x) = 2 * x + 5 = 2 * (0) + 5 = 5",
        "f(x) = 2 * x + 5 = 2 * (1) + 5 = 7",
        "f(x) = 2 * x + 5 = 2 * (2) + 5 = 9",
        "f(x) = 2 * x + 5 = 2 * (3) + 5 = 11"
        ]),
        #Second degree expression
        ("x ** 2 - 4 * x - 12", 
        [
        "f(x) = x ** 2 - 4 * x - 12 = (-3) ** 2 - 4 * (-3) - 12 = 9",
        "f(x) = x ** 2 - 4 * x - 12 = (-2) ** 2 - 4 * (-2) - 12 = 0",
        "f(x) = x ** 2 - 4 * x - 12 = (-1) ** 2 - 4 * (-1) - 12 = -7",
        "f(x) = x ** 2 - 4 * x - 12 = (0) ** 2 - 4 * (0) - 12 = -12",
        "f(x) = x ** 2 - 4 * x - 12 = (1) ** 2 - 4 * (1) - 12 = -15",
        "f(x) = x ** 2 - 4 * x - 12 = (2) ** 2 - 4 * (2) - 12 = -16",
        "f(x) = x ** 2 - 4 * x - 12 = (3) ** 2 - 4 * (3) - 12 = -15"
        ]), 
        ("2 * x ** 2 + 4 * x - 6", 
        [
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (-3) ** 2 + 4 * (-3) - 6 = 0",
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (-2) ** 2 + 4 * (-2) - 6 = -6",
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (-1) ** 2 + 4 * (-1) - 6 = -8",
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (0) ** 2 + 4 * (0) - 6 = -6",
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (1) ** 2 + 4 * (1) - 6 = 0",
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (2) ** 2 + 4 * (2) - 6 = 10",
        "f(x) = 2 * x ** 2 + 4 * x - 6 = 2 * (3) ** 2 + 4 * (3) - 6 = 24"
        ]),
        ("x ** 2 + 4", 
        [
        "f(x) = x ** 2 + 4 = (-3) ** 2 + 4 = 13",
        "f(x) = x ** 2 + 4 = (-2) ** 2 + 4 = 8",
        "f(x) = x ** 2 + 4 = (-1) ** 2 + 4 = 5",
        "f(x) = x ** 2 + 4 = (0) ** 2 + 4 = 4",
        "f(x) = x ** 2 + 4 = (1) ** 2 + 4 = 5",
        "f(x) = x ** 2 + 4 = (2) ** 2 + 4 = 8",
        "f(x) = x ** 2 + 4 = (3) ** 2 + 4 = 13"
        ]),
        ("x ** 2 - 2 * x - 3", 
        [
        "f(x) = x ** 2 - 2 * x - 3 = (-3) ** 2 - 2 * (-3) - 3 = 12",
        "f(x) = x ** 2 - 2 * x - 3 = (-2) ** 2 - 2 * (-2) - 3 = 5",
        "f(x) = x ** 2 - 2 * x - 3 = (-1) ** 2 - 2 * (-1) - 3 = 0",
        "f(x) = x ** 2 - 2 * x - 3 = (0) ** 2 - 2 * (0) - 3 = -3",
        "f(x) = x ** 2 - 2 * x - 3 = (1) ** 2 - 2 * (1) - 3 = -4",
        "f(x) = x ** 2 - 2 * x - 3 = (2) ** 2 - 2 * (2) - 3 = -3",
        "f(x) = x ** 2 - 2 * x - 3 = (3) ** 2 - 2 * (3) - 3 = 0"
        ]),
        ("-x ** 2 + 4 * x - 3", 
        [
        "f(x) = -x ** 2 + 4 * x - 3 = -(-3) ** 2 + 4 * (-3) - 3 = -24",
        "f(x) = -x ** 2 + 4 * x - 3 = -(-2) ** 2 + 4 * (-2) - 3 = -15",
        "f(x) = -x ** 2 + 4 * x - 3 = -(-1) ** 2 + 4 * (-1) - 3 = -8",
        "f(x) = -x ** 2 + 4 * x - 3 = -(0) ** 2 + 4 * (0) - 3 = -3",
        "f(x) = -x ** 2 + 4 * x - 3 = -(1) ** 2 + 4 * (1) - 3 = 0",
        "f(x) = -x ** 2 + 4 * x - 3 = -(2) ** 2 + 4 * (2) - 3 = 1",
        "f(x) = -x ** 2 + 4 * x - 3 = -(3) ** 2 + 4 * (3) - 3 = 0"
        ])
    ])

#Test definition
def test_expression(test_mock_expression,expected):
    #Sending the parameter to the function
    equation = equation_steps(test_mock_expression)
    #If the function return a list proceed further
    if(type(equation) == list):
        #If the result is equal to the expected, pass the test
        assert equation == expected
    else:
        assert False
